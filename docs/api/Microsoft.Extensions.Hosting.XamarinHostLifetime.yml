### YamlMime:ManagedReference
items:
- uid: Microsoft.Extensions.Hosting.XamarinHostLifetime
  commentId: T:Microsoft.Extensions.Hosting.XamarinHostLifetime
  id: XamarinHostLifetime
  parent: Microsoft.Extensions.Hosting
  children:
  - Microsoft.Extensions.Hosting.XamarinHostLifetime.#ctor(Microsoft.Extensions.Options.IOptions{Microsoft.Extensions.Hosting.XamarinHostLifetimeOptions},Microsoft.Extensions.Hosting.IHostEnvironment,Microsoft.Extensions.Hosting.IHostApplicationLifetime)
  - Microsoft.Extensions.Hosting.XamarinHostLifetime.#ctor(Microsoft.Extensions.Options.IOptions{Microsoft.Extensions.Hosting.XamarinHostLifetimeOptions},Microsoft.Extensions.Hosting.IHostEnvironment,Microsoft.Extensions.Hosting.IHostApplicationLifetime,Microsoft.Extensions.Logging.ILoggerFactory)
  - Microsoft.Extensions.Hosting.XamarinHostLifetime.Dispose
  - Microsoft.Extensions.Hosting.XamarinHostLifetime.StopAsync(System.Threading.CancellationToken)
  - Microsoft.Extensions.Hosting.XamarinHostLifetime.WaitForStartAsync(System.Threading.CancellationToken)
  langs:
  - csharp
  - vb
  name: XamarinHostLifetime
  nameWithType: XamarinHostLifetime
  fullName: Microsoft.Extensions.Hosting.XamarinHostLifetime
  type: Class
  source:
    remote:
      path: src/Hosting/XamarinHostLifetime.cs
      branch: master
      repo: https://github.com/jamiewest/XamarinFormsHost.git
    id: XamarinHostLifetime
    path: ../src/Hosting/XamarinHostLifetime.cs
    startLine: 9
  assemblies:
  - West.Extensions.XamarinHosting
  namespace: Microsoft.Extensions.Hosting
  syntax:
    content: 'public class XamarinHostLifetime : IHostLifetime, IDisposable'
    content.vb: >-
      Public Class XamarinHostLifetime
          Implements IHostLifetime, IDisposable
  inheritance:
  - System.Object
  implements:
  - Microsoft.Extensions.Hosting.IHostLifetime
  - System.IDisposable
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Microsoft.Extensions.Hosting.XamarinHostLifetime.#ctor(Microsoft.Extensions.Options.IOptions{Microsoft.Extensions.Hosting.XamarinHostLifetimeOptions},Microsoft.Extensions.Hosting.IHostEnvironment,Microsoft.Extensions.Hosting.IHostApplicationLifetime)
  commentId: M:Microsoft.Extensions.Hosting.XamarinHostLifetime.#ctor(Microsoft.Extensions.Options.IOptions{Microsoft.Extensions.Hosting.XamarinHostLifetimeOptions},Microsoft.Extensions.Hosting.IHostEnvironment,Microsoft.Extensions.Hosting.IHostApplicationLifetime)
  id: '#ctor(Microsoft.Extensions.Options.IOptions{Microsoft.Extensions.Hosting.XamarinHostLifetimeOptions},Microsoft.Extensions.Hosting.IHostEnvironment,Microsoft.Extensions.Hosting.IHostApplicationLifetime)'
  parent: Microsoft.Extensions.Hosting.XamarinHostLifetime
  langs:
  - csharp
  - vb
  name: XamarinHostLifetime(IOptions<XamarinHostLifetimeOptions>, IHostEnvironment, IHostApplicationLifetime)
  nameWithType: XamarinHostLifetime.XamarinHostLifetime(IOptions<XamarinHostLifetimeOptions>, IHostEnvironment, IHostApplicationLifetime)
  fullName: Microsoft.Extensions.Hosting.XamarinHostLifetime.XamarinHostLifetime(Microsoft.Extensions.Options.IOptions<Microsoft.Extensions.Hosting.XamarinHostLifetimeOptions>, Microsoft.Extensions.Hosting.IHostEnvironment, Microsoft.Extensions.Hosting.IHostApplicationLifetime)
  type: Constructor
  source:
    remote:
      path: src/Hosting/XamarinHostLifetime.cs
      branch: master
      repo: https://github.com/jamiewest/XamarinFormsHost.git
    id: .ctor
    path: ../src/Hosting/XamarinHostLifetime.cs
    startLine: 13
  assemblies:
  - West.Extensions.XamarinHosting
  namespace: Microsoft.Extensions.Hosting
  syntax:
    content: public XamarinHostLifetime(IOptions<XamarinHostLifetimeOptions> options, IHostEnvironment environment, IHostApplicationLifetime applicationLifetime)
    parameters:
    - id: options
      type: Microsoft.Extensions.Options.IOptions{Microsoft.Extensions.Hosting.XamarinHostLifetimeOptions}
    - id: environment
      type: Microsoft.Extensions.Hosting.IHostEnvironment
    - id: applicationLifetime
      type: Microsoft.Extensions.Hosting.IHostApplicationLifetime
    content.vb: Public Sub New(options As IOptions(Of XamarinHostLifetimeOptions), environment As IHostEnvironment, applicationLifetime As IHostApplicationLifetime)
  overload: Microsoft.Extensions.Hosting.XamarinHostLifetime.#ctor*
  nameWithType.vb: XamarinHostLifetime.XamarinHostLifetime(IOptions(Of XamarinHostLifetimeOptions), IHostEnvironment, IHostApplicationLifetime)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Extensions.Hosting.XamarinHostLifetime.XamarinHostLifetime(Microsoft.Extensions.Options.IOptions(Of Microsoft.Extensions.Hosting.XamarinHostLifetimeOptions), Microsoft.Extensions.Hosting.IHostEnvironment, Microsoft.Extensions.Hosting.IHostApplicationLifetime)
  name.vb: XamarinHostLifetime(IOptions(Of XamarinHostLifetimeOptions), IHostEnvironment, IHostApplicationLifetime)
- uid: Microsoft.Extensions.Hosting.XamarinHostLifetime.#ctor(Microsoft.Extensions.Options.IOptions{Microsoft.Extensions.Hosting.XamarinHostLifetimeOptions},Microsoft.Extensions.Hosting.IHostEnvironment,Microsoft.Extensions.Hosting.IHostApplicationLifetime,Microsoft.Extensions.Logging.ILoggerFactory)
  commentId: M:Microsoft.Extensions.Hosting.XamarinHostLifetime.#ctor(Microsoft.Extensions.Options.IOptions{Microsoft.Extensions.Hosting.XamarinHostLifetimeOptions},Microsoft.Extensions.Hosting.IHostEnvironment,Microsoft.Extensions.Hosting.IHostApplicationLifetime,Microsoft.Extensions.Logging.ILoggerFactory)
  id: '#ctor(Microsoft.Extensions.Options.IOptions{Microsoft.Extensions.Hosting.XamarinHostLifetimeOptions},Microsoft.Extensions.Hosting.IHostEnvironment,Microsoft.Extensions.Hosting.IHostApplicationLifetime,Microsoft.Extensions.Logging.ILoggerFactory)'
  parent: Microsoft.Extensions.Hosting.XamarinHostLifetime
  langs:
  - csharp
  - vb
  name: XamarinHostLifetime(IOptions<XamarinHostLifetimeOptions>, IHostEnvironment, IHostApplicationLifetime, ILoggerFactory)
  nameWithType: XamarinHostLifetime.XamarinHostLifetime(IOptions<XamarinHostLifetimeOptions>, IHostEnvironment, IHostApplicationLifetime, ILoggerFactory)
  fullName: Microsoft.Extensions.Hosting.XamarinHostLifetime.XamarinHostLifetime(Microsoft.Extensions.Options.IOptions<Microsoft.Extensions.Hosting.XamarinHostLifetimeOptions>, Microsoft.Extensions.Hosting.IHostEnvironment, Microsoft.Extensions.Hosting.IHostApplicationLifetime, Microsoft.Extensions.Logging.ILoggerFactory)
  type: Constructor
  source:
    remote:
      path: src/Hosting/XamarinHostLifetime.cs
      branch: master
      repo: https://github.com/jamiewest/XamarinFormsHost.git
    id: .ctor
    path: ../src/Hosting/XamarinHostLifetime.cs
    startLine: 19
  assemblies:
  - West.Extensions.XamarinHosting
  namespace: Microsoft.Extensions.Hosting
  syntax:
    content: public XamarinHostLifetime(IOptions<XamarinHostLifetimeOptions> options, IHostEnvironment environment, IHostApplicationLifetime applicationLifetime, ILoggerFactory loggerFactory)
    parameters:
    - id: options
      type: Microsoft.Extensions.Options.IOptions{Microsoft.Extensions.Hosting.XamarinHostLifetimeOptions}
    - id: environment
      type: Microsoft.Extensions.Hosting.IHostEnvironment
    - id: applicationLifetime
      type: Microsoft.Extensions.Hosting.IHostApplicationLifetime
    - id: loggerFactory
      type: Microsoft.Extensions.Logging.ILoggerFactory
    content.vb: Public Sub New(options As IOptions(Of XamarinHostLifetimeOptions), environment As IHostEnvironment, applicationLifetime As IHostApplicationLifetime, loggerFactory As ILoggerFactory)
  overload: Microsoft.Extensions.Hosting.XamarinHostLifetime.#ctor*
  nameWithType.vb: XamarinHostLifetime.XamarinHostLifetime(IOptions(Of XamarinHostLifetimeOptions), IHostEnvironment, IHostApplicationLifetime, ILoggerFactory)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Extensions.Hosting.XamarinHostLifetime.XamarinHostLifetime(Microsoft.Extensions.Options.IOptions(Of Microsoft.Extensions.Hosting.XamarinHostLifetimeOptions), Microsoft.Extensions.Hosting.IHostEnvironment, Microsoft.Extensions.Hosting.IHostApplicationLifetime, Microsoft.Extensions.Logging.ILoggerFactory)
  name.vb: XamarinHostLifetime(IOptions(Of XamarinHostLifetimeOptions), IHostEnvironment, IHostApplicationLifetime, ILoggerFactory)
- uid: Microsoft.Extensions.Hosting.XamarinHostLifetime.WaitForStartAsync(System.Threading.CancellationToken)
  commentId: M:Microsoft.Extensions.Hosting.XamarinHostLifetime.WaitForStartAsync(System.Threading.CancellationToken)
  id: WaitForStartAsync(System.Threading.CancellationToken)
  parent: Microsoft.Extensions.Hosting.XamarinHostLifetime
  langs:
  - csharp
  - vb
  name: WaitForStartAsync(CancellationToken)
  nameWithType: XamarinHostLifetime.WaitForStartAsync(CancellationToken)
  fullName: Microsoft.Extensions.Hosting.XamarinHostLifetime.WaitForStartAsync(System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Hosting/XamarinHostLifetime.cs
      branch: master
      repo: https://github.com/jamiewest/XamarinFormsHost.git
    id: WaitForStartAsync
    path: ../src/Hosting/XamarinHostLifetime.cs
    startLine: 39
  assemblies:
  - West.Extensions.XamarinHosting
  namespace: Microsoft.Extensions.Hosting
  syntax:
    content: public Task WaitForStartAsync(CancellationToken cancellationToken)
    parameters:
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task
    content.vb: Public Function WaitForStartAsync(cancellationToken As CancellationToken) As Task
  overload: Microsoft.Extensions.Hosting.XamarinHostLifetime.WaitForStartAsync*
  implements:
  - Microsoft.Extensions.Hosting.IHostLifetime.WaitForStartAsync(System.Threading.CancellationToken)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Extensions.Hosting.XamarinHostLifetime.StopAsync(System.Threading.CancellationToken)
  commentId: M:Microsoft.Extensions.Hosting.XamarinHostLifetime.StopAsync(System.Threading.CancellationToken)
  id: StopAsync(System.Threading.CancellationToken)
  parent: Microsoft.Extensions.Hosting.XamarinHostLifetime
  langs:
  - csharp
  - vb
  name: StopAsync(CancellationToken)
  nameWithType: XamarinHostLifetime.StopAsync(CancellationToken)
  fullName: Microsoft.Extensions.Hosting.XamarinHostLifetime.StopAsync(System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Hosting/XamarinHostLifetime.cs
      branch: master
      repo: https://github.com/jamiewest/XamarinFormsHost.git
    id: StopAsync
    path: ../src/Hosting/XamarinHostLifetime.cs
    startLine: 59
  assemblies:
  - West.Extensions.XamarinHosting
  namespace: Microsoft.Extensions.Hosting
  syntax:
    content: public Task StopAsync(CancellationToken cancellationToken)
    parameters:
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task
    content.vb: Public Function StopAsync(cancellationToken As CancellationToken) As Task
  overload: Microsoft.Extensions.Hosting.XamarinHostLifetime.StopAsync*
  implements:
  - Microsoft.Extensions.Hosting.IHostLifetime.StopAsync(System.Threading.CancellationToken)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Extensions.Hosting.XamarinHostLifetime.Dispose
  commentId: M:Microsoft.Extensions.Hosting.XamarinHostLifetime.Dispose
  id: Dispose
  parent: Microsoft.Extensions.Hosting.XamarinHostLifetime
  langs:
  - csharp
  - vb
  name: Dispose()
  nameWithType: XamarinHostLifetime.Dispose()
  fullName: Microsoft.Extensions.Hosting.XamarinHostLifetime.Dispose()
  type: Method
  source:
    remote:
      path: src/Hosting/XamarinHostLifetime.cs
      branch: master
      repo: https://github.com/jamiewest/XamarinFormsHost.git
    id: Dispose
    path: ../src/Hosting/XamarinHostLifetime.cs
    startLine: 64
  assemblies:
  - West.Extensions.XamarinHosting
  namespace: Microsoft.Extensions.Hosting
  syntax:
    content: public void Dispose()
    content.vb: Public Sub Dispose
  overload: Microsoft.Extensions.Hosting.XamarinHostLifetime.Dispose*
  implements:
  - System.IDisposable.Dispose
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: Microsoft.Extensions.Hosting
  commentId: N:Microsoft.Extensions.Hosting
  name: Microsoft.Extensions.Hosting
  nameWithType: Microsoft.Extensions.Hosting
  fullName: Microsoft.Extensions.Hosting
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Microsoft.Extensions.Hosting.IHostLifetime
  commentId: T:Microsoft.Extensions.Hosting.IHostLifetime
  parent: Microsoft.Extensions.Hosting
  isExternal: true
  name: IHostLifetime
  nameWithType: IHostLifetime
  fullName: Microsoft.Extensions.Hosting.IHostLifetime
- uid: System.IDisposable
  commentId: T:System.IDisposable
  parent: System
  isExternal: true
  name: IDisposable
  nameWithType: IDisposable
  fullName: System.IDisposable
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Microsoft.Extensions.Hosting.XamarinHostLifetime.#ctor*
  commentId: Overload:Microsoft.Extensions.Hosting.XamarinHostLifetime.#ctor
  name: XamarinHostLifetime
  nameWithType: XamarinHostLifetime.XamarinHostLifetime
  fullName: Microsoft.Extensions.Hosting.XamarinHostLifetime.XamarinHostLifetime
- uid: Microsoft.Extensions.Options.IOptions{Microsoft.Extensions.Hosting.XamarinHostLifetimeOptions}
  commentId: T:Microsoft.Extensions.Options.IOptions{Microsoft.Extensions.Hosting.XamarinHostLifetimeOptions}
  parent: Microsoft.Extensions.Options
  definition: Microsoft.Extensions.Options.IOptions`1
  name: IOptions<XamarinHostLifetimeOptions>
  nameWithType: IOptions<XamarinHostLifetimeOptions>
  fullName: Microsoft.Extensions.Options.IOptions<Microsoft.Extensions.Hosting.XamarinHostLifetimeOptions>
  nameWithType.vb: IOptions(Of XamarinHostLifetimeOptions)
  fullName.vb: Microsoft.Extensions.Options.IOptions(Of Microsoft.Extensions.Hosting.XamarinHostLifetimeOptions)
  name.vb: IOptions(Of XamarinHostLifetimeOptions)
  spec.csharp:
  - uid: Microsoft.Extensions.Options.IOptions`1
    name: IOptions
    nameWithType: IOptions
    fullName: Microsoft.Extensions.Options.IOptions
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.Extensions.Hosting.XamarinHostLifetimeOptions
    name: XamarinHostLifetimeOptions
    nameWithType: XamarinHostLifetimeOptions
    fullName: Microsoft.Extensions.Hosting.XamarinHostLifetimeOptions
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Microsoft.Extensions.Options.IOptions`1
    name: IOptions
    nameWithType: IOptions
    fullName: Microsoft.Extensions.Options.IOptions
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.Extensions.Hosting.XamarinHostLifetimeOptions
    name: XamarinHostLifetimeOptions
    nameWithType: XamarinHostLifetimeOptions
    fullName: Microsoft.Extensions.Hosting.XamarinHostLifetimeOptions
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Extensions.Hosting.IHostEnvironment
  commentId: T:Microsoft.Extensions.Hosting.IHostEnvironment
  parent: Microsoft.Extensions.Hosting
  isExternal: true
  name: IHostEnvironment
  nameWithType: IHostEnvironment
  fullName: Microsoft.Extensions.Hosting.IHostEnvironment
- uid: Microsoft.Extensions.Hosting.IHostApplicationLifetime
  commentId: T:Microsoft.Extensions.Hosting.IHostApplicationLifetime
  parent: Microsoft.Extensions.Hosting
  isExternal: true
  name: IHostApplicationLifetime
  nameWithType: IHostApplicationLifetime
  fullName: Microsoft.Extensions.Hosting.IHostApplicationLifetime
- uid: Microsoft.Extensions.Options.IOptions`1
  commentId: T:Microsoft.Extensions.Options.IOptions`1
  isExternal: true
  name: IOptions<TOptions>
  nameWithType: IOptions<TOptions>
  fullName: Microsoft.Extensions.Options.IOptions<TOptions>
  nameWithType.vb: IOptions(Of TOptions)
  fullName.vb: Microsoft.Extensions.Options.IOptions(Of TOptions)
  name.vb: IOptions(Of TOptions)
  spec.csharp:
  - uid: Microsoft.Extensions.Options.IOptions`1
    name: IOptions
    nameWithType: IOptions
    fullName: Microsoft.Extensions.Options.IOptions
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TOptions
    nameWithType: TOptions
    fullName: TOptions
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Microsoft.Extensions.Options.IOptions`1
    name: IOptions
    nameWithType: IOptions
    fullName: Microsoft.Extensions.Options.IOptions
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TOptions
    nameWithType: TOptions
    fullName: TOptions
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Extensions.Options
  commentId: N:Microsoft.Extensions.Options
  isExternal: true
  name: Microsoft.Extensions.Options
  nameWithType: Microsoft.Extensions.Options
  fullName: Microsoft.Extensions.Options
- uid: Microsoft.Extensions.Logging.ILoggerFactory
  commentId: T:Microsoft.Extensions.Logging.ILoggerFactory
  parent: Microsoft.Extensions.Logging
  isExternal: true
  name: ILoggerFactory
  nameWithType: ILoggerFactory
  fullName: Microsoft.Extensions.Logging.ILoggerFactory
- uid: Microsoft.Extensions.Logging
  commentId: N:Microsoft.Extensions.Logging
  isExternal: true
  name: Microsoft.Extensions.Logging
  nameWithType: Microsoft.Extensions.Logging
  fullName: Microsoft.Extensions.Logging
- uid: Microsoft.Extensions.Hosting.XamarinHostLifetime.WaitForStartAsync*
  commentId: Overload:Microsoft.Extensions.Hosting.XamarinHostLifetime.WaitForStartAsync
  name: WaitForStartAsync
  nameWithType: XamarinHostLifetime.WaitForStartAsync
  fullName: Microsoft.Extensions.Hosting.XamarinHostLifetime.WaitForStartAsync
- uid: Microsoft.Extensions.Hosting.IHostLifetime.WaitForStartAsync(System.Threading.CancellationToken)
  commentId: M:Microsoft.Extensions.Hosting.IHostLifetime.WaitForStartAsync(System.Threading.CancellationToken)
  parent: Microsoft.Extensions.Hosting.IHostLifetime
  isExternal: true
  name: WaitForStartAsync(CancellationToken)
  nameWithType: IHostLifetime.WaitForStartAsync(CancellationToken)
  fullName: Microsoft.Extensions.Hosting.IHostLifetime.WaitForStartAsync(System.Threading.CancellationToken)
  spec.csharp:
  - uid: Microsoft.Extensions.Hosting.IHostLifetime.WaitForStartAsync(System.Threading.CancellationToken)
    name: WaitForStartAsync
    nameWithType: IHostLifetime.WaitForStartAsync
    fullName: Microsoft.Extensions.Hosting.IHostLifetime.WaitForStartAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Extensions.Hosting.IHostLifetime.WaitForStartAsync(System.Threading.CancellationToken)
    name: WaitForStartAsync
    nameWithType: IHostLifetime.WaitForStartAsync
    fullName: Microsoft.Extensions.Hosting.IHostLifetime.WaitForStartAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.CancellationToken
  commentId: T:System.Threading.CancellationToken
  parent: System.Threading
  isExternal: true
  name: CancellationToken
  nameWithType: CancellationToken
  fullName: System.Threading.CancellationToken
- uid: System.Threading.Tasks.Task
  commentId: T:System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: true
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task
- uid: System.Threading
  commentId: N:System.Threading
  isExternal: true
  name: System.Threading
  nameWithType: System.Threading
  fullName: System.Threading
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: true
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
- uid: Microsoft.Extensions.Hosting.XamarinHostLifetime.StopAsync*
  commentId: Overload:Microsoft.Extensions.Hosting.XamarinHostLifetime.StopAsync
  name: StopAsync
  nameWithType: XamarinHostLifetime.StopAsync
  fullName: Microsoft.Extensions.Hosting.XamarinHostLifetime.StopAsync
- uid: Microsoft.Extensions.Hosting.IHostLifetime.StopAsync(System.Threading.CancellationToken)
  commentId: M:Microsoft.Extensions.Hosting.IHostLifetime.StopAsync(System.Threading.CancellationToken)
  parent: Microsoft.Extensions.Hosting.IHostLifetime
  isExternal: true
  name: StopAsync(CancellationToken)
  nameWithType: IHostLifetime.StopAsync(CancellationToken)
  fullName: Microsoft.Extensions.Hosting.IHostLifetime.StopAsync(System.Threading.CancellationToken)
  spec.csharp:
  - uid: Microsoft.Extensions.Hosting.IHostLifetime.StopAsync(System.Threading.CancellationToken)
    name: StopAsync
    nameWithType: IHostLifetime.StopAsync
    fullName: Microsoft.Extensions.Hosting.IHostLifetime.StopAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Extensions.Hosting.IHostLifetime.StopAsync(System.Threading.CancellationToken)
    name: StopAsync
    nameWithType: IHostLifetime.StopAsync
    fullName: Microsoft.Extensions.Hosting.IHostLifetime.StopAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Extensions.Hosting.XamarinHostLifetime.Dispose*
  commentId: Overload:Microsoft.Extensions.Hosting.XamarinHostLifetime.Dispose
  name: Dispose
  nameWithType: XamarinHostLifetime.Dispose
  fullName: Microsoft.Extensions.Hosting.XamarinHostLifetime.Dispose
- uid: System.IDisposable.Dispose
  commentId: M:System.IDisposable.Dispose
  parent: System.IDisposable
  isExternal: true
  name: Dispose()
  nameWithType: IDisposable.Dispose()
  fullName: System.IDisposable.Dispose()
  spec.csharp:
  - uid: System.IDisposable.Dispose
    name: Dispose
    nameWithType: IDisposable.Dispose
    fullName: System.IDisposable.Dispose
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IDisposable.Dispose
    name: Dispose
    nameWithType: IDisposable.Dispose
    fullName: System.IDisposable.Dispose
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
