### YamlMime:ManagedReference
items:
- uid: Microsoft.Extensions.Hosting.XamarinBackgroundService
  commentId: T:Microsoft.Extensions.Hosting.XamarinBackgroundService
  id: XamarinBackgroundService
  parent: Microsoft.Extensions.Hosting
  children:
  - Microsoft.Extensions.Hosting.XamarinBackgroundService.Dispose
  - Microsoft.Extensions.Hosting.XamarinBackgroundService.ExecuteAsync(System.Threading.CancellationToken)
  - Microsoft.Extensions.Hosting.XamarinBackgroundService.ResumeAsync(System.Threading.CancellationToken)
  - Microsoft.Extensions.Hosting.XamarinBackgroundService.SleepAsync(System.Threading.CancellationToken)
  - Microsoft.Extensions.Hosting.XamarinBackgroundService.StartAsync(System.Threading.CancellationToken)
  - Microsoft.Extensions.Hosting.XamarinBackgroundService.StopAsync(System.Threading.CancellationToken)
  langs:
  - csharp
  - vb
  name: XamarinBackgroundService
  nameWithType: XamarinBackgroundService
  fullName: Microsoft.Extensions.Hosting.XamarinBackgroundService
  type: Class
  source:
    remote:
      path: src/Abstractions/XamarinBackgroundService.cs
      branch: master
      repo: https://github.com/jamiewest/XamarinFormsHost.git
    id: XamarinBackgroundService
    path: ../src/Abstractions/XamarinBackgroundService.cs
    startLine: 9
  assemblies:
  - West.Extensions.XamarinHosting.Abstractions
  namespace: Microsoft.Extensions.Hosting
  summary: "\nBase class for implementing a long running <xref href=\"Microsoft.Extensions.Hosting.IHostedService\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: 'public abstract class XamarinBackgroundService : IXamarinHostedService, IHostedService, IDisposable'
    content.vb: >-
      Public MustInherit Class XamarinBackgroundService

          Implements IXamarinHostedService, IHostedService, IDisposable
  inheritance:
  - System.Object
  implements:
  - Microsoft.Extensions.Hosting.IXamarinHostedService
  - Microsoft.Extensions.Hosting.IHostedService
  - System.IDisposable
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - abstract
  - class
  modifiers.vb:
  - Public
  - MustInherit
  - Class
- uid: Microsoft.Extensions.Hosting.XamarinBackgroundService.ExecuteAsync(System.Threading.CancellationToken)
  commentId: M:Microsoft.Extensions.Hosting.XamarinBackgroundService.ExecuteAsync(System.Threading.CancellationToken)
  id: ExecuteAsync(System.Threading.CancellationToken)
  parent: Microsoft.Extensions.Hosting.XamarinBackgroundService
  langs:
  - csharp
  - vb
  name: ExecuteAsync(CancellationToken)
  nameWithType: XamarinBackgroundService.ExecuteAsync(CancellationToken)
  fullName: Microsoft.Extensions.Hosting.XamarinBackgroundService.ExecuteAsync(System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Abstractions/XamarinBackgroundService.cs
      branch: master
      repo: https://github.com/jamiewest/XamarinFormsHost.git
    id: ExecuteAsync
    path: ../src/Abstractions/XamarinBackgroundService.cs
    startLine: 20
  assemblies:
  - West.Extensions.XamarinHosting.Abstractions
  namespace: Microsoft.Extensions.Hosting
  summary: "\nThis method is called when the <xref href=\"Microsoft.Extensions.Hosting.IHostedService\" data-throw-if-not-resolved=\"false\"></xref> starts. The implementation should return a task that represents\nthe lifetime of the long running operation(s) being performed.\n"
  example: []
  syntax:
    content: protected abstract Task ExecuteAsync(CancellationToken stoppingToken)
    parameters:
    - id: stoppingToken
      type: System.Threading.CancellationToken
      description: Triggered when <xref href="Microsoft.Extensions.Hosting.IHostedService.StopAsync(System.Threading.CancellationToken)" data-throw-if-not-resolved="false"></xref> is called.
    return:
      type: System.Threading.Tasks.Task
      description: A <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref> that represents the long running operations.
    content.vb: Protected MustOverride Function ExecuteAsync(stoppingToken As CancellationToken) As Task
  overload: Microsoft.Extensions.Hosting.XamarinBackgroundService.ExecuteAsync*
  modifiers.csharp:
  - protected
  - abstract
  modifiers.vb:
  - Protected
  - MustOverride
- uid: Microsoft.Extensions.Hosting.XamarinBackgroundService.StartAsync(System.Threading.CancellationToken)
  commentId: M:Microsoft.Extensions.Hosting.XamarinBackgroundService.StartAsync(System.Threading.CancellationToken)
  id: StartAsync(System.Threading.CancellationToken)
  parent: Microsoft.Extensions.Hosting.XamarinBackgroundService
  langs:
  - csharp
  - vb
  name: StartAsync(CancellationToken)
  nameWithType: XamarinBackgroundService.StartAsync(CancellationToken)
  fullName: Microsoft.Extensions.Hosting.XamarinBackgroundService.StartAsync(System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Abstractions/XamarinBackgroundService.cs
      branch: master
      repo: https://github.com/jamiewest/XamarinFormsHost.git
    id: StartAsync
    path: ../src/Abstractions/XamarinBackgroundService.cs
    startLine: 26
  assemblies:
  - West.Extensions.XamarinHosting.Abstractions
  namespace: Microsoft.Extensions.Hosting
  summary: "\nTriggered when the application host is ready to start the service.\n"
  example: []
  syntax:
    content: public virtual Task StartAsync(CancellationToken cancellationToken)
    parameters:
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: Indicates that the start process has been aborted.
    return:
      type: System.Threading.Tasks.Task
    content.vb: Public Overridable Function StartAsync(cancellationToken As CancellationToken) As Task
  overload: Microsoft.Extensions.Hosting.XamarinBackgroundService.StartAsync*
  implements:
  - Microsoft.Extensions.Hosting.IHostedService.StartAsync(System.Threading.CancellationToken)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Microsoft.Extensions.Hosting.XamarinBackgroundService.StopAsync(System.Threading.CancellationToken)
  commentId: M:Microsoft.Extensions.Hosting.XamarinBackgroundService.StopAsync(System.Threading.CancellationToken)
  id: StopAsync(System.Threading.CancellationToken)
  parent: Microsoft.Extensions.Hosting.XamarinBackgroundService
  langs:
  - csharp
  - vb
  name: StopAsync(CancellationToken)
  nameWithType: XamarinBackgroundService.StopAsync(CancellationToken)
  fullName: Microsoft.Extensions.Hosting.XamarinBackgroundService.StopAsync(System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Abstractions/XamarinBackgroundService.cs
      branch: master
      repo: https://github.com/jamiewest/XamarinFormsHost.git
    id: StopAsync
    path: ../src/Abstractions/XamarinBackgroundService.cs
    startLine: 47
  assemblies:
  - West.Extensions.XamarinHosting.Abstractions
  namespace: Microsoft.Extensions.Hosting
  summary: "\nTriggered when the application host is performing a graceful shutdown.\n"
  example: []
  syntax:
    content: public virtual Task StopAsync(CancellationToken cancellationToken)
    parameters:
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: Indicates that the shutdown process should no longer be graceful.
    return:
      type: System.Threading.Tasks.Task
    content.vb: Public Overridable Function StopAsync(cancellationToken As CancellationToken) As Task
  overload: Microsoft.Extensions.Hosting.XamarinBackgroundService.StopAsync*
  implements:
  - Microsoft.Extensions.Hosting.IHostedService.StopAsync(System.Threading.CancellationToken)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Microsoft.Extensions.Hosting.XamarinBackgroundService.SleepAsync(System.Threading.CancellationToken)
  commentId: M:Microsoft.Extensions.Hosting.XamarinBackgroundService.SleepAsync(System.Threading.CancellationToken)
  id: SleepAsync(System.Threading.CancellationToken)
  parent: Microsoft.Extensions.Hosting.XamarinBackgroundService
  langs:
  - csharp
  - vb
  name: SleepAsync(CancellationToken)
  nameWithType: XamarinBackgroundService.SleepAsync(CancellationToken)
  fullName: Microsoft.Extensions.Hosting.XamarinBackgroundService.SleepAsync(System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Abstractions/XamarinBackgroundService.cs
      branch: master
      repo: https://github.com/jamiewest/XamarinFormsHost.git
    id: SleepAsync
    path: ../src/Abstractions/XamarinBackgroundService.cs
    startLine: 71
  assemblies:
  - West.Extensions.XamarinHosting.Abstractions
  namespace: Microsoft.Extensions.Hosting
  summary: "\nTriggered when the application host is sleeping.\n"
  example: []
  syntax:
    content: public Task SleepAsync(CancellationToken cancellationToken)
    parameters:
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: Indicates that the sleep process should no longer be graceful.
    return:
      type: System.Threading.Tasks.Task
    content.vb: Public Function SleepAsync(cancellationToken As CancellationToken) As Task
  overload: Microsoft.Extensions.Hosting.XamarinBackgroundService.SleepAsync*
  implements:
  - Microsoft.Extensions.Hosting.IXamarinHostedService.SleepAsync(System.Threading.CancellationToken)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Extensions.Hosting.XamarinBackgroundService.ResumeAsync(System.Threading.CancellationToken)
  commentId: M:Microsoft.Extensions.Hosting.XamarinBackgroundService.ResumeAsync(System.Threading.CancellationToken)
  id: ResumeAsync(System.Threading.CancellationToken)
  parent: Microsoft.Extensions.Hosting.XamarinBackgroundService
  langs:
  - csharp
  - vb
  name: ResumeAsync(CancellationToken)
  nameWithType: XamarinBackgroundService.ResumeAsync(CancellationToken)
  fullName: Microsoft.Extensions.Hosting.XamarinBackgroundService.ResumeAsync(System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Abstractions/XamarinBackgroundService.cs
      branch: master
      repo: https://github.com/jamiewest/XamarinFormsHost.git
    id: ResumeAsync
    path: ../src/Abstractions/XamarinBackgroundService.cs
    startLine: 80
  assemblies:
  - West.Extensions.XamarinHosting.Abstractions
  namespace: Microsoft.Extensions.Hosting
  summary: "\nTriggered when the application host is ready to resume the service.\n"
  example: []
  syntax:
    content: public Task ResumeAsync(CancellationToken cancellationToken)
    parameters:
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: Indicates that the resume process has been aborted.
    return:
      type: System.Threading.Tasks.Task
    content.vb: Public Function ResumeAsync(cancellationToken As CancellationToken) As Task
  overload: Microsoft.Extensions.Hosting.XamarinBackgroundService.ResumeAsync*
  implements:
  - Microsoft.Extensions.Hosting.IXamarinHostedService.ResumeAsync(System.Threading.CancellationToken)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Extensions.Hosting.XamarinBackgroundService.Dispose
  commentId: M:Microsoft.Extensions.Hosting.XamarinBackgroundService.Dispose
  id: Dispose
  parent: Microsoft.Extensions.Hosting.XamarinBackgroundService
  langs:
  - csharp
  - vb
  name: Dispose()
  nameWithType: XamarinBackgroundService.Dispose()
  fullName: Microsoft.Extensions.Hosting.XamarinBackgroundService.Dispose()
  type: Method
  source:
    remote:
      path: src/Abstractions/XamarinBackgroundService.cs
      branch: master
      repo: https://github.com/jamiewest/XamarinFormsHost.git
    id: Dispose
    path: ../src/Abstractions/XamarinBackgroundService.cs
    startLine: 85
  assemblies:
  - West.Extensions.XamarinHosting.Abstractions
  namespace: Microsoft.Extensions.Hosting
  syntax:
    content: public virtual void Dispose()
    content.vb: Public Overridable Sub Dispose
  overload: Microsoft.Extensions.Hosting.XamarinBackgroundService.Dispose*
  implements:
  - System.IDisposable.Dispose
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
references:
- uid: Microsoft.Extensions.Hosting.IHostedService
  commentId: T:Microsoft.Extensions.Hosting.IHostedService
  parent: Microsoft.Extensions.Hosting
  isExternal: true
  name: IHostedService
  nameWithType: IHostedService
  fullName: Microsoft.Extensions.Hosting.IHostedService
- uid: Microsoft.Extensions.Hosting
  commentId: N:Microsoft.Extensions.Hosting
  name: Microsoft.Extensions.Hosting
  nameWithType: Microsoft.Extensions.Hosting
  fullName: Microsoft.Extensions.Hosting
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Microsoft.Extensions.Hosting.IXamarinHostedService
  commentId: T:Microsoft.Extensions.Hosting.IXamarinHostedService
  parent: Microsoft.Extensions.Hosting
  name: IXamarinHostedService
  nameWithType: IXamarinHostedService
  fullName: Microsoft.Extensions.Hosting.IXamarinHostedService
- uid: System.IDisposable
  commentId: T:System.IDisposable
  parent: System
  isExternal: true
  name: IDisposable
  nameWithType: IDisposable
  fullName: System.IDisposable
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Microsoft.Extensions.Hosting.IHostedService.StopAsync(System.Threading.CancellationToken)
  commentId: M:Microsoft.Extensions.Hosting.IHostedService.StopAsync(System.Threading.CancellationToken)
  parent: Microsoft.Extensions.Hosting.IHostedService
  isExternal: true
  name: StopAsync(CancellationToken)
  nameWithType: IHostedService.StopAsync(CancellationToken)
  fullName: Microsoft.Extensions.Hosting.IHostedService.StopAsync(System.Threading.CancellationToken)
  spec.csharp:
  - uid: Microsoft.Extensions.Hosting.IHostedService.StopAsync(System.Threading.CancellationToken)
    name: StopAsync
    nameWithType: IHostedService.StopAsync
    fullName: Microsoft.Extensions.Hosting.IHostedService.StopAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Extensions.Hosting.IHostedService.StopAsync(System.Threading.CancellationToken)
    name: StopAsync
    nameWithType: IHostedService.StopAsync
    fullName: Microsoft.Extensions.Hosting.IHostedService.StopAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task
  commentId: T:System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: true
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task
- uid: Microsoft.Extensions.Hosting.XamarinBackgroundService.ExecuteAsync*
  commentId: Overload:Microsoft.Extensions.Hosting.XamarinBackgroundService.ExecuteAsync
  name: ExecuteAsync
  nameWithType: XamarinBackgroundService.ExecuteAsync
  fullName: Microsoft.Extensions.Hosting.XamarinBackgroundService.ExecuteAsync
- uid: System.Threading.CancellationToken
  commentId: T:System.Threading.CancellationToken
  parent: System.Threading
  isExternal: true
  name: CancellationToken
  nameWithType: CancellationToken
  fullName: System.Threading.CancellationToken
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: true
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
- uid: System.Threading
  commentId: N:System.Threading
  isExternal: true
  name: System.Threading
  nameWithType: System.Threading
  fullName: System.Threading
- uid: Microsoft.Extensions.Hosting.XamarinBackgroundService.StartAsync*
  commentId: Overload:Microsoft.Extensions.Hosting.XamarinBackgroundService.StartAsync
  name: StartAsync
  nameWithType: XamarinBackgroundService.StartAsync
  fullName: Microsoft.Extensions.Hosting.XamarinBackgroundService.StartAsync
- uid: Microsoft.Extensions.Hosting.IHostedService.StartAsync(System.Threading.CancellationToken)
  commentId: M:Microsoft.Extensions.Hosting.IHostedService.StartAsync(System.Threading.CancellationToken)
  parent: Microsoft.Extensions.Hosting.IHostedService
  isExternal: true
  name: StartAsync(CancellationToken)
  nameWithType: IHostedService.StartAsync(CancellationToken)
  fullName: Microsoft.Extensions.Hosting.IHostedService.StartAsync(System.Threading.CancellationToken)
  spec.csharp:
  - uid: Microsoft.Extensions.Hosting.IHostedService.StartAsync(System.Threading.CancellationToken)
    name: StartAsync
    nameWithType: IHostedService.StartAsync
    fullName: Microsoft.Extensions.Hosting.IHostedService.StartAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Extensions.Hosting.IHostedService.StartAsync(System.Threading.CancellationToken)
    name: StartAsync
    nameWithType: IHostedService.StartAsync
    fullName: Microsoft.Extensions.Hosting.IHostedService.StartAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Extensions.Hosting.XamarinBackgroundService.StopAsync*
  commentId: Overload:Microsoft.Extensions.Hosting.XamarinBackgroundService.StopAsync
  name: StopAsync
  nameWithType: XamarinBackgroundService.StopAsync
  fullName: Microsoft.Extensions.Hosting.XamarinBackgroundService.StopAsync
- uid: Microsoft.Extensions.Hosting.XamarinBackgroundService.SleepAsync*
  commentId: Overload:Microsoft.Extensions.Hosting.XamarinBackgroundService.SleepAsync
  name: SleepAsync
  nameWithType: XamarinBackgroundService.SleepAsync
  fullName: Microsoft.Extensions.Hosting.XamarinBackgroundService.SleepAsync
- uid: Microsoft.Extensions.Hosting.IXamarinHostedService.SleepAsync(System.Threading.CancellationToken)
  commentId: M:Microsoft.Extensions.Hosting.IXamarinHostedService.SleepAsync(System.Threading.CancellationToken)
  parent: Microsoft.Extensions.Hosting.IXamarinHostedService
  isExternal: true
  name: SleepAsync(CancellationToken)
  nameWithType: IXamarinHostedService.SleepAsync(CancellationToken)
  fullName: Microsoft.Extensions.Hosting.IXamarinHostedService.SleepAsync(System.Threading.CancellationToken)
  spec.csharp:
  - uid: Microsoft.Extensions.Hosting.IXamarinHostedService.SleepAsync(System.Threading.CancellationToken)
    name: SleepAsync
    nameWithType: IXamarinHostedService.SleepAsync
    fullName: Microsoft.Extensions.Hosting.IXamarinHostedService.SleepAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Extensions.Hosting.IXamarinHostedService.SleepAsync(System.Threading.CancellationToken)
    name: SleepAsync
    nameWithType: IXamarinHostedService.SleepAsync
    fullName: Microsoft.Extensions.Hosting.IXamarinHostedService.SleepAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Extensions.Hosting.XamarinBackgroundService.ResumeAsync*
  commentId: Overload:Microsoft.Extensions.Hosting.XamarinBackgroundService.ResumeAsync
  name: ResumeAsync
  nameWithType: XamarinBackgroundService.ResumeAsync
  fullName: Microsoft.Extensions.Hosting.XamarinBackgroundService.ResumeAsync
- uid: Microsoft.Extensions.Hosting.IXamarinHostedService.ResumeAsync(System.Threading.CancellationToken)
  commentId: M:Microsoft.Extensions.Hosting.IXamarinHostedService.ResumeAsync(System.Threading.CancellationToken)
  parent: Microsoft.Extensions.Hosting.IXamarinHostedService
  isExternal: true
  name: ResumeAsync(CancellationToken)
  nameWithType: IXamarinHostedService.ResumeAsync(CancellationToken)
  fullName: Microsoft.Extensions.Hosting.IXamarinHostedService.ResumeAsync(System.Threading.CancellationToken)
  spec.csharp:
  - uid: Microsoft.Extensions.Hosting.IXamarinHostedService.ResumeAsync(System.Threading.CancellationToken)
    name: ResumeAsync
    nameWithType: IXamarinHostedService.ResumeAsync
    fullName: Microsoft.Extensions.Hosting.IXamarinHostedService.ResumeAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Extensions.Hosting.IXamarinHostedService.ResumeAsync(System.Threading.CancellationToken)
    name: ResumeAsync
    nameWithType: IXamarinHostedService.ResumeAsync
    fullName: Microsoft.Extensions.Hosting.IXamarinHostedService.ResumeAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Extensions.Hosting.XamarinBackgroundService.Dispose*
  commentId: Overload:Microsoft.Extensions.Hosting.XamarinBackgroundService.Dispose
  name: Dispose
  nameWithType: XamarinBackgroundService.Dispose
  fullName: Microsoft.Extensions.Hosting.XamarinBackgroundService.Dispose
- uid: System.IDisposable.Dispose
  commentId: M:System.IDisposable.Dispose
  parent: System.IDisposable
  isExternal: true
  name: Dispose()
  nameWithType: IDisposable.Dispose()
  fullName: System.IDisposable.Dispose()
  spec.csharp:
  - uid: System.IDisposable.Dispose
    name: Dispose
    nameWithType: IDisposable.Dispose
    fullName: System.IDisposable.Dispose
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IDisposable.Dispose
    name: Dispose
    nameWithType: IDisposable.Dispose
    fullName: System.IDisposable.Dispose
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
