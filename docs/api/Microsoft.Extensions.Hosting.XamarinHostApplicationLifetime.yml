### YamlMime:ManagedReference
items:
- uid: Microsoft.Extensions.Hosting.XamarinHostApplicationLifetime
  commentId: T:Microsoft.Extensions.Hosting.XamarinHostApplicationLifetime
  id: XamarinHostApplicationLifetime
  parent: Microsoft.Extensions.Hosting
  children:
  - Microsoft.Extensions.Hosting.XamarinHostApplicationLifetime.#ctor(Microsoft.Extensions.Logging.ILogger{Microsoft.Extensions.Hosting.Internal.ApplicationLifetime})
  - Microsoft.Extensions.Hosting.XamarinHostApplicationLifetime.ApplicationResuming
  - Microsoft.Extensions.Hosting.XamarinHostApplicationLifetime.ApplicationSleeping
  - Microsoft.Extensions.Hosting.XamarinHostApplicationLifetime.NotifyResuming
  - Microsoft.Extensions.Hosting.XamarinHostApplicationLifetime.NotifySleeping
  langs:
  - csharp
  - vb
  name: XamarinHostApplicationLifetime
  nameWithType: XamarinHostApplicationLifetime
  fullName: Microsoft.Extensions.Hosting.XamarinHostApplicationLifetime
  type: Class
  source:
    remote:
      path: src/Hosting/XamarinHostApplicationLifetime.cs
      branch: master
      repo: https://github.com/jamiewest/XamarinFormsHost.git
    id: XamarinHostApplicationLifetime
    path: ../src/Hosting/XamarinHostApplicationLifetime.cs
    startLine: 9
  assemblies:
  - West.Extensions.XamarinHosting
  namespace: Microsoft.Extensions.Hosting
  summary: "\nAllows consumers to perform cleanup during a graceful shutdown.\n"
  example: []
  syntax:
    content: 'public class XamarinHostApplicationLifetime : ApplicationLifetime, IApplicationLifetime, IXamarinHostApplicationLifetime, IHostApplicationLifetime'
    content.vb: >-
      Public Class XamarinHostApplicationLifetime
          Inherits ApplicationLifetime
          Implements IApplicationLifetime, IXamarinHostApplicationLifetime, IHostApplicationLifetime
  inheritance:
  - System.Object
  - Microsoft.Extensions.Hosting.Internal.ApplicationLifetime
  implements:
  - Microsoft.Extensions.Hosting.IApplicationLifetime
  - Microsoft.Extensions.Hosting.IXamarinHostApplicationLifetime
  - Microsoft.Extensions.Hosting.IHostApplicationLifetime
  inheritedMembers:
  - Microsoft.Extensions.Hosting.Internal.ApplicationLifetime.StopApplication
  - Microsoft.Extensions.Hosting.Internal.ApplicationLifetime.NotifyStarted
  - Microsoft.Extensions.Hosting.Internal.ApplicationLifetime.NotifyStopped
  - Microsoft.Extensions.Hosting.Internal.ApplicationLifetime.ApplicationStarted
  - Microsoft.Extensions.Hosting.Internal.ApplicationLifetime.ApplicationStopping
  - Microsoft.Extensions.Hosting.Internal.ApplicationLifetime.ApplicationStopped
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Microsoft.Extensions.Hosting.XamarinHostApplicationLifetime.#ctor(Microsoft.Extensions.Logging.ILogger{Microsoft.Extensions.Hosting.Internal.ApplicationLifetime})
  commentId: M:Microsoft.Extensions.Hosting.XamarinHostApplicationLifetime.#ctor(Microsoft.Extensions.Logging.ILogger{Microsoft.Extensions.Hosting.Internal.ApplicationLifetime})
  id: '#ctor(Microsoft.Extensions.Logging.ILogger{Microsoft.Extensions.Hosting.Internal.ApplicationLifetime})'
  parent: Microsoft.Extensions.Hosting.XamarinHostApplicationLifetime
  langs:
  - csharp
  - vb
  name: XamarinHostApplicationLifetime(ILogger<ApplicationLifetime>)
  nameWithType: XamarinHostApplicationLifetime.XamarinHostApplicationLifetime(ILogger<ApplicationLifetime>)
  fullName: Microsoft.Extensions.Hosting.XamarinHostApplicationLifetime.XamarinHostApplicationLifetime(Microsoft.Extensions.Logging.ILogger<Microsoft.Extensions.Hosting.Internal.ApplicationLifetime>)
  type: Constructor
  source:
    remote:
      path: src/Hosting/XamarinHostApplicationLifetime.cs
      branch: master
      repo: https://github.com/jamiewest/XamarinFormsHost.git
    id: .ctor
    path: ../src/Hosting/XamarinHostApplicationLifetime.cs
    startLine: 17
  assemblies:
  - West.Extensions.XamarinHosting
  namespace: Microsoft.Extensions.Hosting
  summary: "\nCreates a new instance of <xref href=\"Microsoft.Extensions.Hosting.XamarinHostApplicationLifetime\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public XamarinHostApplicationLifetime(ILogger<ApplicationLifetime> logger)
    parameters:
    - id: logger
      type: Microsoft.Extensions.Logging.ILogger{Microsoft.Extensions.Hosting.Internal.ApplicationLifetime}
      description: The <xref href="Microsoft.Extensions.Logging.ILogger" data-throw-if-not-resolved="false"></xref> used to log messages.
    content.vb: Public Sub New(logger As ILogger(Of ApplicationLifetime))
  overload: Microsoft.Extensions.Hosting.XamarinHostApplicationLifetime.#ctor*
  nameWithType.vb: XamarinHostApplicationLifetime.XamarinHostApplicationLifetime(ILogger(Of ApplicationLifetime))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Extensions.Hosting.XamarinHostApplicationLifetime.XamarinHostApplicationLifetime(Microsoft.Extensions.Logging.ILogger(Of Microsoft.Extensions.Hosting.Internal.ApplicationLifetime))
  name.vb: XamarinHostApplicationLifetime(ILogger(Of ApplicationLifetime))
- uid: Microsoft.Extensions.Hosting.XamarinHostApplicationLifetime.ApplicationSleeping
  commentId: P:Microsoft.Extensions.Hosting.XamarinHostApplicationLifetime.ApplicationSleeping
  id: ApplicationSleeping
  parent: Microsoft.Extensions.Hosting.XamarinHostApplicationLifetime
  langs:
  - csharp
  - vb
  name: ApplicationSleeping
  nameWithType: XamarinHostApplicationLifetime.ApplicationSleeping
  fullName: Microsoft.Extensions.Hosting.XamarinHostApplicationLifetime.ApplicationSleeping
  type: Property
  source:
    remote:
      path: src/Hosting/XamarinHostApplicationLifetime.cs
      branch: master
      repo: https://github.com/jamiewest/XamarinFormsHost.git
    id: ApplicationSleeping
    path: ../src/Hosting/XamarinHostApplicationLifetime.cs
    startLine: 27
  assemblies:
  - West.Extensions.XamarinHosting
  namespace: Microsoft.Extensions.Hosting
  summary: "\nTriggered when the application host has gone to sleep.\n"
  example: []
  syntax:
    content: public ILifecycleRegister ApplicationSleeping { get; }
    parameters: []
    return:
      type: Microsoft.Extensions.Hosting.ILifecycleRegister
    content.vb: Public ReadOnly Property ApplicationSleeping As ILifecycleRegister
  overload: Microsoft.Extensions.Hosting.XamarinHostApplicationLifetime.ApplicationSleeping*
  implements:
  - Microsoft.Extensions.Hosting.IXamarinHostApplicationLifetime.ApplicationSleeping
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.Extensions.Hosting.XamarinHostApplicationLifetime.ApplicationResuming
  commentId: P:Microsoft.Extensions.Hosting.XamarinHostApplicationLifetime.ApplicationResuming
  id: ApplicationResuming
  parent: Microsoft.Extensions.Hosting.XamarinHostApplicationLifetime
  langs:
  - csharp
  - vb
  name: ApplicationResuming
  nameWithType: XamarinHostApplicationLifetime.ApplicationResuming
  fullName: Microsoft.Extensions.Hosting.XamarinHostApplicationLifetime.ApplicationResuming
  type: Property
  source:
    remote:
      path: src/Hosting/XamarinHostApplicationLifetime.cs
      branch: master
      repo: https://github.com/jamiewest/XamarinFormsHost.git
    id: ApplicationResuming
    path: ../src/Hosting/XamarinHostApplicationLifetime.cs
    startLine: 33
  assemblies:
  - West.Extensions.XamarinHosting
  namespace: Microsoft.Extensions.Hosting
  summary: "\nTriggered when the application host is resuming.\n"
  example: []
  syntax:
    content: public ILifecycleRegister ApplicationResuming { get; }
    parameters: []
    return:
      type: Microsoft.Extensions.Hosting.ILifecycleRegister
    content.vb: Public ReadOnly Property ApplicationResuming As ILifecycleRegister
  overload: Microsoft.Extensions.Hosting.XamarinHostApplicationLifetime.ApplicationResuming*
  implements:
  - Microsoft.Extensions.Hosting.IXamarinHostApplicationLifetime.ApplicationResuming
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.Extensions.Hosting.XamarinHostApplicationLifetime.NotifySleeping
  commentId: M:Microsoft.Extensions.Hosting.XamarinHostApplicationLifetime.NotifySleeping
  id: NotifySleeping
  parent: Microsoft.Extensions.Hosting.XamarinHostApplicationLifetime
  langs:
  - csharp
  - vb
  name: NotifySleeping()
  nameWithType: XamarinHostApplicationLifetime.NotifySleeping()
  fullName: Microsoft.Extensions.Hosting.XamarinHostApplicationLifetime.NotifySleeping()
  type: Method
  source:
    remote:
      path: src/Hosting/XamarinHostApplicationLifetime.cs
      branch: master
      repo: https://github.com/jamiewest/XamarinFormsHost.git
    id: NotifySleeping
    path: ../src/Hosting/XamarinHostApplicationLifetime.cs
    startLine: 38
  assemblies:
  - West.Extensions.XamarinHosting
  namespace: Microsoft.Extensions.Hosting
  summary: "\nSignals the ApplicationSleeping event and blocks until it completes.\n"
  example: []
  syntax:
    content: public void NotifySleeping()
    content.vb: Public Sub NotifySleeping
  overload: Microsoft.Extensions.Hosting.XamarinHostApplicationLifetime.NotifySleeping*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Extensions.Hosting.XamarinHostApplicationLifetime.NotifyResuming
  commentId: M:Microsoft.Extensions.Hosting.XamarinHostApplicationLifetime.NotifyResuming
  id: NotifyResuming
  parent: Microsoft.Extensions.Hosting.XamarinHostApplicationLifetime
  langs:
  - csharp
  - vb
  name: NotifyResuming()
  nameWithType: XamarinHostApplicationLifetime.NotifyResuming()
  fullName: Microsoft.Extensions.Hosting.XamarinHostApplicationLifetime.NotifyResuming()
  type: Method
  source:
    remote:
      path: src/Hosting/XamarinHostApplicationLifetime.cs
      branch: master
      repo: https://github.com/jamiewest/XamarinFormsHost.git
    id: NotifyResuming
    path: ../src/Hosting/XamarinHostApplicationLifetime.cs
    startLine: 58
  assemblies:
  - West.Extensions.XamarinHosting
  namespace: Microsoft.Extensions.Hosting
  summary: "\nSignals the ApplicationResuming event and blocks until it completes.\n"
  example: []
  syntax:
    content: public void NotifyResuming()
    content.vb: Public Sub NotifyResuming
  overload: Microsoft.Extensions.Hosting.XamarinHostApplicationLifetime.NotifyResuming*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: Microsoft.Extensions.Hosting
  commentId: N:Microsoft.Extensions.Hosting
  name: Microsoft.Extensions.Hosting
  nameWithType: Microsoft.Extensions.Hosting
  fullName: Microsoft.Extensions.Hosting
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Microsoft.Extensions.Hosting.Internal.ApplicationLifetime
  commentId: T:Microsoft.Extensions.Hosting.Internal.ApplicationLifetime
  parent: Microsoft.Extensions.Hosting.Internal
  isExternal: true
  name: ApplicationLifetime
  nameWithType: ApplicationLifetime
  fullName: Microsoft.Extensions.Hosting.Internal.ApplicationLifetime
- uid: Microsoft.Extensions.Hosting.IApplicationLifetime
  commentId: T:Microsoft.Extensions.Hosting.IApplicationLifetime
  parent: Microsoft.Extensions.Hosting
  isExternal: true
  name: IApplicationLifetime
  nameWithType: IApplicationLifetime
  fullName: Microsoft.Extensions.Hosting.IApplicationLifetime
- uid: Microsoft.Extensions.Hosting.IXamarinHostApplicationLifetime
  commentId: T:Microsoft.Extensions.Hosting.IXamarinHostApplicationLifetime
  parent: Microsoft.Extensions.Hosting
  name: IXamarinHostApplicationLifetime
  nameWithType: IXamarinHostApplicationLifetime
  fullName: Microsoft.Extensions.Hosting.IXamarinHostApplicationLifetime
- uid: Microsoft.Extensions.Hosting.IHostApplicationLifetime
  commentId: T:Microsoft.Extensions.Hosting.IHostApplicationLifetime
  parent: Microsoft.Extensions.Hosting
  isExternal: true
  name: IHostApplicationLifetime
  nameWithType: IHostApplicationLifetime
  fullName: Microsoft.Extensions.Hosting.IHostApplicationLifetime
- uid: Microsoft.Extensions.Hosting.Internal.ApplicationLifetime.StopApplication
  commentId: M:Microsoft.Extensions.Hosting.Internal.ApplicationLifetime.StopApplication
  parent: Microsoft.Extensions.Hosting.Internal.ApplicationLifetime
  isExternal: true
  name: StopApplication()
  nameWithType: ApplicationLifetime.StopApplication()
  fullName: Microsoft.Extensions.Hosting.Internal.ApplicationLifetime.StopApplication()
  spec.csharp:
  - uid: Microsoft.Extensions.Hosting.Internal.ApplicationLifetime.StopApplication
    name: StopApplication
    nameWithType: ApplicationLifetime.StopApplication
    fullName: Microsoft.Extensions.Hosting.Internal.ApplicationLifetime.StopApplication
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Extensions.Hosting.Internal.ApplicationLifetime.StopApplication
    name: StopApplication
    nameWithType: ApplicationLifetime.StopApplication
    fullName: Microsoft.Extensions.Hosting.Internal.ApplicationLifetime.StopApplication
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Extensions.Hosting.Internal.ApplicationLifetime.NotifyStarted
  commentId: M:Microsoft.Extensions.Hosting.Internal.ApplicationLifetime.NotifyStarted
  parent: Microsoft.Extensions.Hosting.Internal.ApplicationLifetime
  isExternal: true
  name: NotifyStarted()
  nameWithType: ApplicationLifetime.NotifyStarted()
  fullName: Microsoft.Extensions.Hosting.Internal.ApplicationLifetime.NotifyStarted()
  spec.csharp:
  - uid: Microsoft.Extensions.Hosting.Internal.ApplicationLifetime.NotifyStarted
    name: NotifyStarted
    nameWithType: ApplicationLifetime.NotifyStarted
    fullName: Microsoft.Extensions.Hosting.Internal.ApplicationLifetime.NotifyStarted
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Extensions.Hosting.Internal.ApplicationLifetime.NotifyStarted
    name: NotifyStarted
    nameWithType: ApplicationLifetime.NotifyStarted
    fullName: Microsoft.Extensions.Hosting.Internal.ApplicationLifetime.NotifyStarted
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Extensions.Hosting.Internal.ApplicationLifetime.NotifyStopped
  commentId: M:Microsoft.Extensions.Hosting.Internal.ApplicationLifetime.NotifyStopped
  parent: Microsoft.Extensions.Hosting.Internal.ApplicationLifetime
  isExternal: true
  name: NotifyStopped()
  nameWithType: ApplicationLifetime.NotifyStopped()
  fullName: Microsoft.Extensions.Hosting.Internal.ApplicationLifetime.NotifyStopped()
  spec.csharp:
  - uid: Microsoft.Extensions.Hosting.Internal.ApplicationLifetime.NotifyStopped
    name: NotifyStopped
    nameWithType: ApplicationLifetime.NotifyStopped
    fullName: Microsoft.Extensions.Hosting.Internal.ApplicationLifetime.NotifyStopped
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Extensions.Hosting.Internal.ApplicationLifetime.NotifyStopped
    name: NotifyStopped
    nameWithType: ApplicationLifetime.NotifyStopped
    fullName: Microsoft.Extensions.Hosting.Internal.ApplicationLifetime.NotifyStopped
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Extensions.Hosting.Internal.ApplicationLifetime.ApplicationStarted
  commentId: P:Microsoft.Extensions.Hosting.Internal.ApplicationLifetime.ApplicationStarted
  parent: Microsoft.Extensions.Hosting.Internal.ApplicationLifetime
  isExternal: true
  name: ApplicationStarted
  nameWithType: ApplicationLifetime.ApplicationStarted
  fullName: Microsoft.Extensions.Hosting.Internal.ApplicationLifetime.ApplicationStarted
- uid: Microsoft.Extensions.Hosting.Internal.ApplicationLifetime.ApplicationStopping
  commentId: P:Microsoft.Extensions.Hosting.Internal.ApplicationLifetime.ApplicationStopping
  parent: Microsoft.Extensions.Hosting.Internal.ApplicationLifetime
  isExternal: true
  name: ApplicationStopping
  nameWithType: ApplicationLifetime.ApplicationStopping
  fullName: Microsoft.Extensions.Hosting.Internal.ApplicationLifetime.ApplicationStopping
- uid: Microsoft.Extensions.Hosting.Internal.ApplicationLifetime.ApplicationStopped
  commentId: P:Microsoft.Extensions.Hosting.Internal.ApplicationLifetime.ApplicationStopped
  parent: Microsoft.Extensions.Hosting.Internal.ApplicationLifetime
  isExternal: true
  name: ApplicationStopped
  nameWithType: ApplicationLifetime.ApplicationStopped
  fullName: Microsoft.Extensions.Hosting.Internal.ApplicationLifetime.ApplicationStopped
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Microsoft.Extensions.Hosting.Internal
  commentId: N:Microsoft.Extensions.Hosting.Internal
  isExternal: true
  name: Microsoft.Extensions.Hosting.Internal
  nameWithType: Microsoft.Extensions.Hosting.Internal
  fullName: Microsoft.Extensions.Hosting.Internal
- uid: Microsoft.Extensions.Hosting.XamarinHostApplicationLifetime
  commentId: T:Microsoft.Extensions.Hosting.XamarinHostApplicationLifetime
  name: XamarinHostApplicationLifetime
  nameWithType: XamarinHostApplicationLifetime
  fullName: Microsoft.Extensions.Hosting.XamarinHostApplicationLifetime
- uid: Microsoft.Extensions.Logging.ILogger
  commentId: T:Microsoft.Extensions.Logging.ILogger
  isExternal: true
- uid: Microsoft.Extensions.Hosting.XamarinHostApplicationLifetime.#ctor*
  commentId: Overload:Microsoft.Extensions.Hosting.XamarinHostApplicationLifetime.#ctor
  name: XamarinHostApplicationLifetime
  nameWithType: XamarinHostApplicationLifetime.XamarinHostApplicationLifetime
  fullName: Microsoft.Extensions.Hosting.XamarinHostApplicationLifetime.XamarinHostApplicationLifetime
- uid: Microsoft.Extensions.Logging.ILogger{Microsoft.Extensions.Hosting.Internal.ApplicationLifetime}
  commentId: T:Microsoft.Extensions.Logging.ILogger{Microsoft.Extensions.Hosting.Internal.ApplicationLifetime}
  parent: Microsoft.Extensions.Logging
  definition: Microsoft.Extensions.Logging.ILogger`1
  name: ILogger<ApplicationLifetime>
  nameWithType: ILogger<ApplicationLifetime>
  fullName: Microsoft.Extensions.Logging.ILogger<Microsoft.Extensions.Hosting.Internal.ApplicationLifetime>
  nameWithType.vb: ILogger(Of ApplicationLifetime)
  fullName.vb: Microsoft.Extensions.Logging.ILogger(Of Microsoft.Extensions.Hosting.Internal.ApplicationLifetime)
  name.vb: ILogger(Of ApplicationLifetime)
  spec.csharp:
  - uid: Microsoft.Extensions.Logging.ILogger`1
    name: ILogger
    nameWithType: ILogger
    fullName: Microsoft.Extensions.Logging.ILogger
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.Extensions.Hosting.Internal.ApplicationLifetime
    name: ApplicationLifetime
    nameWithType: ApplicationLifetime
    fullName: Microsoft.Extensions.Hosting.Internal.ApplicationLifetime
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Microsoft.Extensions.Logging.ILogger`1
    name: ILogger
    nameWithType: ILogger
    fullName: Microsoft.Extensions.Logging.ILogger
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.Extensions.Hosting.Internal.ApplicationLifetime
    name: ApplicationLifetime
    nameWithType: ApplicationLifetime
    fullName: Microsoft.Extensions.Hosting.Internal.ApplicationLifetime
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Extensions.Logging.ILogger`1
  commentId: T:Microsoft.Extensions.Logging.ILogger`1
  isExternal: true
  name: ILogger<TCategoryName>
  nameWithType: ILogger<TCategoryName>
  fullName: Microsoft.Extensions.Logging.ILogger<TCategoryName>
  nameWithType.vb: ILogger(Of TCategoryName)
  fullName.vb: Microsoft.Extensions.Logging.ILogger(Of TCategoryName)
  name.vb: ILogger(Of TCategoryName)
  spec.csharp:
  - uid: Microsoft.Extensions.Logging.ILogger`1
    name: ILogger
    nameWithType: ILogger
    fullName: Microsoft.Extensions.Logging.ILogger
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TCategoryName
    nameWithType: TCategoryName
    fullName: TCategoryName
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Microsoft.Extensions.Logging.ILogger`1
    name: ILogger
    nameWithType: ILogger
    fullName: Microsoft.Extensions.Logging.ILogger
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TCategoryName
    nameWithType: TCategoryName
    fullName: TCategoryName
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Extensions.Logging
  commentId: N:Microsoft.Extensions.Logging
  isExternal: true
  name: Microsoft.Extensions.Logging
  nameWithType: Microsoft.Extensions.Logging
  fullName: Microsoft.Extensions.Logging
- uid: Microsoft.Extensions.Hosting.XamarinHostApplicationLifetime.ApplicationSleeping*
  commentId: Overload:Microsoft.Extensions.Hosting.XamarinHostApplicationLifetime.ApplicationSleeping
  name: ApplicationSleeping
  nameWithType: XamarinHostApplicationLifetime.ApplicationSleeping
  fullName: Microsoft.Extensions.Hosting.XamarinHostApplicationLifetime.ApplicationSleeping
- uid: Microsoft.Extensions.Hosting.IXamarinHostApplicationLifetime.ApplicationSleeping
  commentId: P:Microsoft.Extensions.Hosting.IXamarinHostApplicationLifetime.ApplicationSleeping
  parent: Microsoft.Extensions.Hosting.IXamarinHostApplicationLifetime
  name: ApplicationSleeping
  nameWithType: IXamarinHostApplicationLifetime.ApplicationSleeping
  fullName: Microsoft.Extensions.Hosting.IXamarinHostApplicationLifetime.ApplicationSleeping
- uid: Microsoft.Extensions.Hosting.ILifecycleRegister
  commentId: T:Microsoft.Extensions.Hosting.ILifecycleRegister
  parent: Microsoft.Extensions.Hosting
  name: ILifecycleRegister
  nameWithType: ILifecycleRegister
  fullName: Microsoft.Extensions.Hosting.ILifecycleRegister
- uid: Microsoft.Extensions.Hosting.XamarinHostApplicationLifetime.ApplicationResuming*
  commentId: Overload:Microsoft.Extensions.Hosting.XamarinHostApplicationLifetime.ApplicationResuming
  name: ApplicationResuming
  nameWithType: XamarinHostApplicationLifetime.ApplicationResuming
  fullName: Microsoft.Extensions.Hosting.XamarinHostApplicationLifetime.ApplicationResuming
- uid: Microsoft.Extensions.Hosting.IXamarinHostApplicationLifetime.ApplicationResuming
  commentId: P:Microsoft.Extensions.Hosting.IXamarinHostApplicationLifetime.ApplicationResuming
  parent: Microsoft.Extensions.Hosting.IXamarinHostApplicationLifetime
  name: ApplicationResuming
  nameWithType: IXamarinHostApplicationLifetime.ApplicationResuming
  fullName: Microsoft.Extensions.Hosting.IXamarinHostApplicationLifetime.ApplicationResuming
- uid: Microsoft.Extensions.Hosting.XamarinHostApplicationLifetime.NotifySleeping*
  commentId: Overload:Microsoft.Extensions.Hosting.XamarinHostApplicationLifetime.NotifySleeping
  name: NotifySleeping
  nameWithType: XamarinHostApplicationLifetime.NotifySleeping
  fullName: Microsoft.Extensions.Hosting.XamarinHostApplicationLifetime.NotifySleeping
- uid: Microsoft.Extensions.Hosting.XamarinHostApplicationLifetime.NotifyResuming*
  commentId: Overload:Microsoft.Extensions.Hosting.XamarinHostApplicationLifetime.NotifyResuming
  name: NotifyResuming
  nameWithType: XamarinHostApplicationLifetime.NotifyResuming
  fullName: Microsoft.Extensions.Hosting.XamarinHostApplicationLifetime.NotifyResuming
