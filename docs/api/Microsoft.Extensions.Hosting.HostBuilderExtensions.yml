### YamlMime:ManagedReference
items:
- uid: Microsoft.Extensions.Hosting.HostBuilderExtensions
  commentId: T:Microsoft.Extensions.Hosting.HostBuilderExtensions
  id: HostBuilderExtensions
  parent: Microsoft.Extensions.Hosting
  children:
  - Microsoft.Extensions.Hosting.HostBuilderExtensions.UseHostedService``1(Microsoft.Extensions.Hosting.IHostBuilder)
  - Microsoft.Extensions.Hosting.HostBuilderExtensions.UseXamarinLifetime``1(Microsoft.Extensions.Hosting.IHostBuilder)
  - Microsoft.Extensions.Hosting.HostBuilderExtensions.UseXamarinLifetime``1(Microsoft.Extensions.Hosting.IHostBuilder,System.Action{Microsoft.Extensions.Hosting.XamarinHostLifetime})
  langs:
  - csharp
  - vb
  name: HostBuilderExtensions
  nameWithType: HostBuilderExtensions
  fullName: Microsoft.Extensions.Hosting.HostBuilderExtensions
  type: Class
  source:
    remote:
      path: src/Hosting/Extensions/HostBuilderExtensions.cs
      branch: master
      repo: https://github.com/jamiewest/XamarinFormsHost.git
    id: HostBuilderExtensions
    path: ../src/Hosting/Extensions/HostBuilderExtensions.cs
    startLine: 8
  assemblies:
  - West.Extensions.XamarinHosting
  namespace: Microsoft.Extensions.Hosting
  summary: "\nExtensions for <xref href=\"Microsoft.Extensions.Hosting.IHostBuilder\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public static class HostBuilderExtensions
    content.vb: Public Module HostBuilderExtensions
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: Microsoft.Extensions.Hosting.HostBuilderExtensions.UseHostedService``1(Microsoft.Extensions.Hosting.IHostBuilder)
  commentId: M:Microsoft.Extensions.Hosting.HostBuilderExtensions.UseHostedService``1(Microsoft.Extensions.Hosting.IHostBuilder)
  id: UseHostedService``1(Microsoft.Extensions.Hosting.IHostBuilder)
  isExtensionMethod: true
  parent: Microsoft.Extensions.Hosting.HostBuilderExtensions
  langs:
  - csharp
  - vb
  name: UseHostedService<T>(IHostBuilder)
  nameWithType: HostBuilderExtensions.UseHostedService<T>(IHostBuilder)
  fullName: Microsoft.Extensions.Hosting.HostBuilderExtensions.UseHostedService<T>(Microsoft.Extensions.Hosting.IHostBuilder)
  type: Method
  source:
    remote:
      path: src/Hosting/Extensions/HostBuilderExtensions.cs
      branch: master
      repo: https://github.com/jamiewest/XamarinFormsHost.git
    id: UseHostedService
    path: ../src/Hosting/Extensions/HostBuilderExtensions.cs
    startLine: 16
  assemblies:
  - West.Extensions.XamarinHosting
  namespace: Microsoft.Extensions.Hosting
  summary: "\nConvenience method for adding an <xref href=\"Microsoft.Extensions.Hosting.IHostedService\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: >-
      public static IHostBuilder UseHostedService<T>(this IHostBuilder hostBuilder)
          where T : class, IHostedService
    parameters:
    - id: hostBuilder
      type: Microsoft.Extensions.Hosting.IHostBuilder
      description: The <xref href="Microsoft.Extensions.Hosting.IHostBuilder" data-throw-if-not-resolved="false"></xref> to configure.
    typeParameters:
    - id: T
      description: The type of service to add.
    return:
      type: Microsoft.Extensions.Hosting.IHostBuilder
      description: The same instance of the <xref href="Microsoft.Extensions.Hosting.IHostBuilder" data-throw-if-not-resolved="false"></xref> for chaining.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function UseHostedService(Of T As {Class, IHostedService})(hostBuilder As IHostBuilder) As IHostBuilder
  overload: Microsoft.Extensions.Hosting.HostBuilderExtensions.UseHostedService*
  nameWithType.vb: HostBuilderExtensions.UseHostedService(Of T)(IHostBuilder)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.Extensions.Hosting.HostBuilderExtensions.UseHostedService(Of T)(Microsoft.Extensions.Hosting.IHostBuilder)
  name.vb: UseHostedService(Of T)(IHostBuilder)
- uid: Microsoft.Extensions.Hosting.HostBuilderExtensions.UseXamarinLifetime``1(Microsoft.Extensions.Hosting.IHostBuilder)
  commentId: M:Microsoft.Extensions.Hosting.HostBuilderExtensions.UseXamarinLifetime``1(Microsoft.Extensions.Hosting.IHostBuilder)
  id: UseXamarinLifetime``1(Microsoft.Extensions.Hosting.IHostBuilder)
  isExtensionMethod: true
  parent: Microsoft.Extensions.Hosting.HostBuilderExtensions
  langs:
  - csharp
  - vb
  name: UseXamarinLifetime<TApplication>(IHostBuilder)
  nameWithType: HostBuilderExtensions.UseXamarinLifetime<TApplication>(IHostBuilder)
  fullName: Microsoft.Extensions.Hosting.HostBuilderExtensions.UseXamarinLifetime<TApplication>(Microsoft.Extensions.Hosting.IHostBuilder)
  type: Method
  source:
    remote:
      path: src/Hosting/Extensions/HostBuilderExtensions.cs
      branch: master
      repo: https://github.com/jamiewest/XamarinFormsHost.git
    id: UseXamarinLifetime
    path: ../src/Hosting/Extensions/HostBuilderExtensions.cs
    startLine: 27
  assemblies:
  - West.Extensions.XamarinHosting
  namespace: Microsoft.Extensions.Hosting
  summary: "\nAdds support for Xamarin Sleep and Resume lifecycle events.\n"
  example: []
  syntax:
    content: >-
      public static IHostBuilder UseXamarinLifetime<TApplication>(this IHostBuilder hostBuilder)
          where TApplication : class
    parameters:
    - id: hostBuilder
      type: Microsoft.Extensions.Hosting.IHostBuilder
      description: The <xref href="Microsoft.Extensions.Hosting.IHostBuilder" data-throw-if-not-resolved="false"></xref> to configure.
    typeParameters:
    - id: TApplication
      description: The application class.
    return:
      type: Microsoft.Extensions.Hosting.IHostBuilder
      description: The same instance of the <xref href="Microsoft.Extensions.Hosting.IHostBuilder" data-throw-if-not-resolved="false"></xref> for chaining
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function UseXamarinLifetime(Of TApplication As Class)(hostBuilder As IHostBuilder) As IHostBuilder
  overload: Microsoft.Extensions.Hosting.HostBuilderExtensions.UseXamarinLifetime*
  nameWithType.vb: HostBuilderExtensions.UseXamarinLifetime(Of TApplication)(IHostBuilder)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.Extensions.Hosting.HostBuilderExtensions.UseXamarinLifetime(Of TApplication)(Microsoft.Extensions.Hosting.IHostBuilder)
  name.vb: UseXamarinLifetime(Of TApplication)(IHostBuilder)
- uid: Microsoft.Extensions.Hosting.HostBuilderExtensions.UseXamarinLifetime``1(Microsoft.Extensions.Hosting.IHostBuilder,System.Action{Microsoft.Extensions.Hosting.XamarinHostLifetime})
  commentId: M:Microsoft.Extensions.Hosting.HostBuilderExtensions.UseXamarinLifetime``1(Microsoft.Extensions.Hosting.IHostBuilder,System.Action{Microsoft.Extensions.Hosting.XamarinHostLifetime})
  id: UseXamarinLifetime``1(Microsoft.Extensions.Hosting.IHostBuilder,System.Action{Microsoft.Extensions.Hosting.XamarinHostLifetime})
  isExtensionMethod: true
  parent: Microsoft.Extensions.Hosting.HostBuilderExtensions
  langs:
  - csharp
  - vb
  name: UseXamarinLifetime<TApplication>(IHostBuilder, Action<XamarinHostLifetime>)
  nameWithType: HostBuilderExtensions.UseXamarinLifetime<TApplication>(IHostBuilder, Action<XamarinHostLifetime>)
  fullName: Microsoft.Extensions.Hosting.HostBuilderExtensions.UseXamarinLifetime<TApplication>(Microsoft.Extensions.Hosting.IHostBuilder, System.Action<Microsoft.Extensions.Hosting.XamarinHostLifetime>)
  type: Method
  source:
    remote:
      path: src/Hosting/Extensions/HostBuilderExtensions.cs
      branch: master
      repo: https://github.com/jamiewest/XamarinFormsHost.git
    id: UseXamarinLifetime
    path: ../src/Hosting/Extensions/HostBuilderExtensions.cs
    startLine: 43
  assemblies:
  - West.Extensions.XamarinHosting
  namespace: Microsoft.Extensions.Hosting
  syntax:
    content: >-
      public static IHostBuilder UseXamarinLifetime<TApplication>(this IHostBuilder hostBuilder, Action<XamarinHostLifetime> configureOptions)
          where TApplication : class
    parameters:
    - id: hostBuilder
      type: Microsoft.Extensions.Hosting.IHostBuilder
    - id: configureOptions
      type: System.Action{Microsoft.Extensions.Hosting.XamarinHostLifetime}
    typeParameters:
    - id: TApplication
    return:
      type: Microsoft.Extensions.Hosting.IHostBuilder
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function UseXamarinLifetime(Of TApplication As Class)(hostBuilder As IHostBuilder, configureOptions As Action(Of XamarinHostLifetime)) As IHostBuilder
  overload: Microsoft.Extensions.Hosting.HostBuilderExtensions.UseXamarinLifetime*
  nameWithType.vb: HostBuilderExtensions.UseXamarinLifetime(Of TApplication)(IHostBuilder, Action(Of XamarinHostLifetime))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.Extensions.Hosting.HostBuilderExtensions.UseXamarinLifetime(Of TApplication)(Microsoft.Extensions.Hosting.IHostBuilder, System.Action(Of Microsoft.Extensions.Hosting.XamarinHostLifetime))
  name.vb: UseXamarinLifetime(Of TApplication)(IHostBuilder, Action(Of XamarinHostLifetime))
references:
- uid: Microsoft.Extensions.Hosting.IHostBuilder
  commentId: T:Microsoft.Extensions.Hosting.IHostBuilder
  parent: Microsoft.Extensions.Hosting
  isExternal: true
  name: IHostBuilder
  nameWithType: IHostBuilder
  fullName: Microsoft.Extensions.Hosting.IHostBuilder
- uid: Microsoft.Extensions.Hosting
  commentId: N:Microsoft.Extensions.Hosting
  name: Microsoft.Extensions.Hosting
  nameWithType: Microsoft.Extensions.Hosting
  fullName: Microsoft.Extensions.Hosting
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Microsoft.Extensions.Hosting.IHostedService
  commentId: T:Microsoft.Extensions.Hosting.IHostedService
  isExternal: true
- uid: Microsoft.Extensions.Hosting.HostBuilderExtensions.UseHostedService*
  commentId: Overload:Microsoft.Extensions.Hosting.HostBuilderExtensions.UseHostedService
  name: UseHostedService
  nameWithType: HostBuilderExtensions.UseHostedService
  fullName: Microsoft.Extensions.Hosting.HostBuilderExtensions.UseHostedService
- uid: Microsoft.Extensions.Hosting.HostBuilderExtensions.UseXamarinLifetime*
  commentId: Overload:Microsoft.Extensions.Hosting.HostBuilderExtensions.UseXamarinLifetime
  name: UseXamarinLifetime
  nameWithType: HostBuilderExtensions.UseXamarinLifetime
  fullName: Microsoft.Extensions.Hosting.HostBuilderExtensions.UseXamarinLifetime
- uid: System.Action{Microsoft.Extensions.Hosting.XamarinHostLifetime}
  commentId: T:System.Action{Microsoft.Extensions.Hosting.XamarinHostLifetime}
  parent: System
  definition: System.Action`1
  name: Action<XamarinHostLifetime>
  nameWithType: Action<XamarinHostLifetime>
  fullName: System.Action<Microsoft.Extensions.Hosting.XamarinHostLifetime>
  nameWithType.vb: Action(Of XamarinHostLifetime)
  fullName.vb: System.Action(Of Microsoft.Extensions.Hosting.XamarinHostLifetime)
  name.vb: Action(Of XamarinHostLifetime)
  spec.csharp:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.Extensions.Hosting.XamarinHostLifetime
    name: XamarinHostLifetime
    nameWithType: XamarinHostLifetime
    fullName: Microsoft.Extensions.Hosting.XamarinHostLifetime
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.Extensions.Hosting.XamarinHostLifetime
    name: XamarinHostLifetime
    nameWithType: XamarinHostLifetime
    fullName: Microsoft.Extensions.Hosting.XamarinHostLifetime
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Action`1
  commentId: T:System.Action`1
  isExternal: true
  name: Action<T>
  nameWithType: Action<T>
  fullName: System.Action<T>
  nameWithType.vb: Action(Of T)
  fullName.vb: System.Action(Of T)
  name.vb: Action(Of T)
  spec.csharp:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
